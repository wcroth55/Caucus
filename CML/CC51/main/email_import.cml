#
#---EMAIL_IMPORT.CML.    Caucus CML script: import conference updates from e-mail.
#
#   Invoked as:
#      sweba sweba.conf email_import mailtext temp mailer
#
#   Parameters:
#      sweba        The Caucus stand-alone CML interpreter program
#      sweba.conf   The configuration file for sweba
#      import.cml   This file.  (Must be relative to CML_Path in sweba.conf!)
#      mailtext     (arg 1) full pathname of file containing incoming mail
#      temp         (arg 2) full pathname of temporary file directory
#      mailer       (arg 3) full pathname of e-mail client
#
#   Purpose:
#      Import.cml is a CML script for the Caucus stand-alone CML
#      interpreter, sweba.  It imports e-mail from conference 
#      members that is in a known format (specifically, as a reply
#      to conference e-mail generated by sendup.cml), and posts
#      the replies as responses to the appropriate items and
#      conferences.
#
#   How it works:
#      Each conference has an e-mail list that is controlled by the
#      switch "mail_out", and by the Caucus interface file custom.cml.
#      
#      Typically import.cml is run on a regular basis, (e.g. once a day)
#      by the 'cron' utility or some other automatic scheme.
#
#      Import scans the incoming e-mail, plucks the conference and
#      item number off of the subject field, strips out any
#      'original' text, and adds what remains to the appropriate
#      item.
#
#   Known bugs:
#      Different mail clients use different ways of indicating
#      'original', or replied-to, text.  As new formats are
#      discovered, $email_extract() should be extended to skip over them
#      as well.
#
#   History of revisions:
#: CR  8/21/96 17:14 First release version.
#: CR  5/19/04 Break each email into a separate file...
#: CR  7/09/04 Modifications for new import-attached-files code.
#: CR  4/01/07 Ready for 5.1
#: CR  4/07/07 Use $email_extract()
#----------------------------------------------------------------------------

set mailer $arg(3)
set main   CC51/main
eval $mac_define (digit4 \$str_sub(0 \$minus(4 \$strlen(@1)) 000)@1)

if $empty ($arg(2))
   "Error: no temporary file directory specified.
   return
end
set tmp $arg(2)

#---If this id is not registered, "create" it as a person.
if $not ($my_exist())
   set ignore $set_my_name (Caucus Mailer)
end

#---Open input mail text file, and verify it exists.
set in $open ($arg(1) r)
if $equal ($(in) 0)
   "
   "Cannot read mail text file '$arg(1)'.
   "
   return
end

#---Get the address for the Caucus email participation psuedo-user.
set emailAddress $config(emailParticipationAddress)
if $empty($(emailAddress))
   set emailAddress $site_data (0 - SWmail_out)@$xshell(1 1 1 hostname)
end

#---Force all added responses to be considered "new" immediately.
set ignore $set_my_text (1)

#---Use a simple state machine to process each line of the input.
#   0 => ignore text
#   1 => processing mail header
#   2 => reading text of message.
set state 0
set fout -1
set pid $word(1 $replace(/ 32 $pid()))
set fname $(tmp)/caucus.mail.$userid().$(pid)

while $readln ($(in) line)
   set word1 $word (1 $(line))

   #---Skip lines like "Message n:", they're output from /bin/mail.
   if $and ($not_equal ($charval(0 $(line)) 32) \
            $equal ($(word1) Message) \
            $equal ($sizeof($(line)) 2) \
            $equal ($str_revdex (: $(line))  $minus ($strlen($(line)) 1)))
      continue
   end

   #---If line starts with "From", begin new message.
   if $and ($not_equal ($charval(0 $(line)) 32) $equal ($(word1) From))
      if $greater ($(fout) 0)
         eval $close ($(fout))
         set  fout -1
         include $(main)/email_import_process.i $(fname) $(sender) \
                               $quote($(subject)) $(emailAddress)
      end
      set fout   $open ($(fname) w)
      set sender $word (2 $(line))
      set subject
   end

   #---Traditional "stripping" of quoted-reply lines that start with "> "
   #   or ">> ".  There are undoubtably others that need to be added...
   if $and ($equal ($charval (0 $(line)) 62)  \
            $equal ($charval (1 $(line)) 32))
      continue
   end
   if $and ($equal ($charval (0 $(line)) 62)  \
            $equal ($charval (1 $(line)) 62)  \
            $equal ($charval (2 $(line)) 32))
      continue
   end

   eval $writeln ($(fout) $(line))

   if $and ($empty ($(subject)) \
            $not_equal ($charval(0 $(line)) 32) \
            $equal ($(word1) Subject:))
      set subject $rest (2 $(line))
   end
end
if $greater ($(fout) 0)
   eval $close ($(fout))
   set  fout -1
   include $(main)/email_import_process.i $(fname) $(sender) $quote($(subject)) $(emailAddress)
end
eval $close($(in))
#----------------------------------------------------------------------------
