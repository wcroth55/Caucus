#
#---updateDatabase.cml   Make sure the database structure is up to date.
#
#   Purpose:
#      updateDatabase.cml makes sure that the MySQL database for this
#      Caucus site is up-to-date.  This means that the database structure
#      (tables and columns in tables) matches the structure expected by
#      this version of the software.
#
#   Invoked as:
#      Run when the Caucus "install" shell script is run, i.e. during
#      a new install, or an upgrade.  It is also run *each* *time*
#      swebd (the master Caucus daemon) is started, via a "Script"
#      line in the swebd.conf configuration file.
#
#   How it works:
#      If required tables do not exist, they are created.
#      As columns in existing tables are added or changed (by newer
#      versions of the software), tests are added to this script for
#      the change, and if the proper columns are not found, they
#      are added or changed here as necessary.
#
#      *All* such additions and changes are now centralized here,
#      as of version 5.1.  Previous versions made these changes in
#      a variety of places, that were hard to maintain.
#
#   Arguments:
#      $arg(1) -- if supplied, the userid of the primary manager.
#                 This should only happen at install time, and
#                 has the effect of also creating the Demonstration
#                 and interface_storage_cc51 conferences.
#
#:CR 06/05/06 New script.
#:CR 08/28/07 Move old sql_update_tables.i queries here!
#:CR 09/11/07 Add resps.author_shows_as.
#:CR 09/25/07 Add confs.private, quizproblems.reference
#:CR 01/08/08 Add quiz.includeScore
#:CR 11/07/08 Add configuration table, +10 to permission values.
#:CR 05/09/10 Add version'able responses, item types.
#----------------------------------------------------------------------

#---Make sure we can actually talk to MySQL!
set now $sql_query_select (select now())
if $empty ($(now))
   "
   "Caucus cannot connect to MySQL.  Please investigate and
   "re-run the installation procedure (starting with untar-ing)
   "the caucus5.tar file.
   quit
end

eval $append ($caucus_path()/updateDatabase.log \
              Start: $dateof($time())$newline())

eval $mac_define (queryFailed \
        \$set(h \$sql_query_open(@@)) \
        \$eval( \$sql_query_row  (\$(h))) \
        \$eval( \$sql_query_close(\$(h))) \
        \$less (\$(h) 0))

eval $mac_define (createTable \
        \$set(h \$sql_query_open(@@)) \
        \$eval( \$sql_query_close(\$(h))) \
        Create: \$if (\$less (\$(h) 0) FAILED_: Success:) @3)

eval $mac_define (generalQuery  \
        \$set(h \$sql_query_open(@@)) \
        \$eval( \$sql_query_close(\$(h))))

eval $mac_define (oneRowQuery \
        \$set(h \$sql_query_open(@@)) \
        \$eval( \$sql_query_row (\$(h)))\
        \$eval( \$sql_query_close(\$(h))))


#===CREATE: user_info, user_columns.
#   FILL:              user_columns
if %queryFailed(SELECT count(*) c FROM user_info WHERE userid='roth')
   set q CREATE TABLE user_info ( \
            userid   varchar(255), primary key (userid),  \
            active   int,          index(active),  \
            fname    varchar(255), index(fname),  \
            lname    varchar(255), index(lname),  \
            prefix   varchar(255),  \
            suffix   varchar(255),  \
            intro    mediumtext,    \
            phone    varchar(255),  \
            email    varchar(255),  \
            homepage varchar(255),  \
            picture  varchar(255),  \
            regface  varchar(255),  \
            registered datetime,     index(registered), \
            laston     datetime,     index(laston) \
         )
   "%createTable($(q))

   set q CREATE TABLE user_columns ( \
            name   varchar(255), primary key (name), \
            type   varchar( 32), \
            descr  varchar(255), \
            magic  int default 0 \
         )
   "%createTable($(q))

   eval $mac_define (insert_uc \
        \$set(h \$sql_query_open( \
           INSERT INTO user_columns (name, type, magic, descr) VALUES (@@) )\
        \$eval( \$sql_query_close(\$(h))) \$(h)))

   eval %insert_uc('userid', 'string', 0, '')
   eval %insert_uc('active', 'int'   , 0, '')
   eval %insert_uc('fname',  'string', 0, 'First, middle etc names')
   eval %insert_uc('lname',  'string', 0, 'Last name')
   eval %insert_uc('prefix', 'string', 0, 'Title or prefix')
   eval %insert_uc('suffix', 'string', 0, 'Suffix or organization')
   eval %insert_uc('intro',  'text'  , 0, 'Brief introduction')
   eval %insert_uc('phone',  'string', 0, 'Telephone')
   eval %insert_uc('email',  'string', 0, 'E-mail address')
   eval %insert_uc('picture','upload', 0, 'Picture')
   eval %insert_uc('homepage','string',0, 'Home page')
   eval %insert_uc('registered','date',1, 'Registered')
   eval %insert_uc('regface','string', 1, 'Reg Interface')
   eval %insert_uc('laston', 'date'  , 1, 'Time last on Caucus')
end

#===CREATE: user_data
if %queryFailed(SELECT count(*) FROM user_data WHERE userid='roth')
   set q CREATE TABLE user_data ( \
            userid varchar(255),  \
            foreign key (userid) references user_info (userid),  \
            name   varchar(240), primary key (userid, name),  \
            value  mediumtext  \
         )
   "%createTable($(q))
end

#===CREATE: user_iface
if %queryFailed(SELECT count(*) FROM user_iface WHERE name='lname')
   set q CREATE TABLE user_iface ( \
            name      varchar(240), index(name),   \
            iface     varchar( 64), index(iface),  \
            format    varchar( 64),  \
            width     int,  \
            choices   mediumtext,  \
            required  int,  \
            position  float,  \
            label     mediumtext,  \
            on_reg    int,  \
            on_public int,  \
            on_self   int,  \
            on_mgr    int,  \
            macro     varchar(255)  \
         )
   "%createTable($(q))
end

#---FILL: user_iface
if $empty ($sql_query_select (SELECT name FROM user_iface LIMIT 1))

   eval $mac_define (f \
      \$sql_query_close (\$sql_query_open (INSERT INTO user_iface VALUES @@)))
   
   eval %f(('laston','CC51','{none}',0,'',0,14,'Last on Caucus:',1,1,1,1,\
            'monthDayYear'))
   eval %f(('registered','CC51','{none}',0,'',0,15,'Registered:',1,1,1,1,\
            'monthDayYear'))
   eval %f(('homepage','CC51','text-line',40,'',0,13,'Home Page:',1,1,1,1,\
            'url'))
   eval %f(('intro','CC51','text-box',40,'',0,11,'Brief introduction:',1,1,1,1,\
            ''))
   eval %f(('picture','CC51','upload',0,'',0,12,'Picture:',1,1,1,1,'picture'))
   eval %f(('fname','CC51','text-line',30,'',0,7,'First (middle etc) name:',\
            1,0,1,1,''))
   eval %f(('lname','CC51','text-line',30,'',1,8,'Last name:',1,0,1,1,''))
   eval %f(('email','CC51','text-line',30,'',0,9,'E-mail address:',1,1,1,1,\
            'mailto'))
   eval %f(('phone','CC51','text-line',0,'',0,10,'Telephone:',1,1,1,1,''))
   eval %f(('userid','CC51','text-line',20,'',1,4,'User ID:',1,0,0,0,''))
   eval %f(('{Verify-PW}','CC51','',20,'',1,6,'Password (again):',1,0,0,0,''))
   eval %f(('{CML-box}','CC51','',0,'',0,2,\
            'Use this page to register a user ID (or \"username\") and a \
             password\nfor Caucus.&nbspYour user ID identifies you to \
             Caucus.&nbsp;  Choose a user ID\nand a password that you will \
             remember.\n<p/>\nFields marked with a \
             <font color=red><b>*</b></font> are required.<p/>',1,0,0,0,''))
   eval %f(('{Password}','CC51','',20,'',1,5,'Password:',1,0,0,0,''))
   eval %f(('{Error-msg}','CC51','',0,'',0,3,'',1,0,0,0,''))
   eval %f(('{Toolbar}','CC51','',0,'',0,1,'',1,0,0,0,''))
   eval %f(('{none}','CC51','{none}',0,'',0,16,'',1,1,1,1,''))
   "  Filled: user_iface $sql_query_select (SELECT COUNT(*) FROM user_iface)
end

#===CREATE: site_data
if %queryFailed(SELECT count(*) FROM site_data WHERE cnum=0)
   set q CREATE TABLE site_data ( \
            cnum   int default 0,  \
            inum   varchar(100) default '-',  \
            name   varchar(240), primary key (cnum, inum, name),  \
            value  mediumtext  \
         )
   "%createTable($(q))
end

#===CREATE: groups, grouprules
if %queryFailed(SELECT count(*) FROM grouprules)

   eval %generalQuery(DROP TABLE groups)

   set q CREATE TABLE groups ( \
            userid   varchar(240),        index(userid),  \
            owner    varchar(240) binary, index(owner),   \
            name     varchar(240),        index(name),    \
            access   int     default 0,   index(access),  \
            active   tinyint default 0,   index(active),  \
            priority int     default 0  \
         )
   "%createTable($(q))

   set q CREATE TABLE grouprules ( \
            grkey    int,                 primary key(grkey),  \
            owner    varchar(240) binary, index(owner),   \
            name     varchar(240),        index(name),    \
            userid   varchar(240),        index(userid),  \
            wildcard bool default 0,   \
            subowner varchar(240),  \
            subname  varchar(240),  \
            access   int  default 0,  \
            optional bool default 0,  \
            bySelf   bool default 0 \
         )
   "%createTable($(q))
end

#===CREATE: confs
if %queryFailed(SELECT count(*) FROM confs)
   set q CREATE TABLE confs ( \
            cnum    varchar(10),  primary key(cnum),  index(cnum), \
            parent  varchar(10),  index(parent),  \
            name    varchar(240), index(name) \
         )
   "%createTable($(q))

   set q CREATE TABLE name_cascade ( \
            type    varchar(10),  index(type),  \
            name    varchar(240), index(name),  \
            active  tinyint  \
         )
   "%createTable($(q))
end

#===CREATE: confhidden
if %queryFailed(SELECT count(*) FROM confhidden)
   set q CREATE TABLE confhidden ( \
            userid  varchar(240),  \
            cnum    varchar(10),  primary key(userid, cnum),  \
            hidden  tinyint default 0 \
         )
   "%createTable($(q))
end

#===CREATE: events
if %queryFailed(SELECT count(*) FROM events)
   set q create table events (  \
            event      varchar(12), index (event),  \
            userid     varchar(80), index (userid),  \
            sessionid  char(20),    index (sessionid),  \
            time       timestamp,   index (time),  \
            duration   integer,  \
            size       integer,  \
            conf       integer,     index (conf),  \
            item       integer,  \
            r0         integer,  \
            rn         integer,  \
            iface      varchar(40), index (iface),  \
            object     varchar(80),  \
            s1         varchar(80),  \
            s2         varchar(80),  \
            s3         varchar(80),  \
            n1         integer,  \
            n2         integer,  \
            n3         integer  \
         )
   "%createTable($(q))
end

#===CREATE: conforder
if %queryFailed(SELECT count(*) FROM conforder)
   set q create table conforder (  \
            userid varchar(240),  \
            cnum   varchar(10),   primary key (userid, cnum),  \
            alpha  varchar(240) \
         )
   "%createTable($(q))
end

#===CREATE: resps, items, conf_has_items, resps_seen (Caucus 5.1)
if %queryFailed(SELECT count(*) FROM conf_has_items)
   set q create table resps (  \
            items_id  int not null,     \
            rnum      int not null auto_increment, \
               key(rnum),                          \
               primary key (items_id, rnum), \
            userid    varchar(240), index(userid),  \
            text      mediumtext,  \
            time      datetime,  \
            prop      int default 0,  \
            bits      int default 0,  \
            copy_rnum int default 0, \
            copy_item int default 0, \
            copier    varchar(240),  \
            copy_time datetime,  \
            copy_show tinyint default 0, \
            deleted   tinyint default 0  \
         )
   "%createTable($(q))

   set q create table items (  \
            id        int not null auto_increment, primary key (id),  index(id), \
            userid    varchar(240),  \
            title     varchar(255),  \
            lastresp  int default -1,  \
            frozen    tinyint default 0  \
         )
   "%createTable($(q))

   set q create table conf_has_items (  \
            cnum     varchar(10), index(cnum),  \
               foreign key (cnum) references confs (cnum),  \
            items_id int, index(items_id),  \
               foreign key (items_id) references items (id),  \
            item0   int default 0, index(item0),  \
            item1   int default 0, index(item1),  \
            item2   int default 0, index(item2),  \
            item3   int default 0, index(item3),  \
            item4   int default 0, index(item4),  \
            item5   int default 0, index(item5),  \
            hidden  tinyint default 0,  \
            retired tinyint default 0,  \
            items_parent int default 0, index(items_parent), \
            resps_parent int default 0, index(resps_parent)  \
         )
   "%createTable($(q))

   set q create table resps_seen (  \
            userid   varchar(240), primary key (userid, items_id),  \
            items_id int,  \
            seen     int,  \
            forgot   tinyint default 0 \
         )
   "%createTable($(q))
end

#===CREATE: assignments
if %queryFailed(SELECT count(*) FROM assignments)
   set q create table assignments ( \
            asnkey     int not null auto_increment, primary key (asnkey), \
            cnum       int not null, index (cnum), \
            instructor varchar(80), \
            title      varchar(80), \
            start      date, \
            end        date, \
            due        date, \
            text       mediumtext, \
            texttype   varchar(32), \
            item       int, \
            taskkey    int \
         )
   "%createTable($(q))
end

#===CREATE: grade_scores
if %queryFailed(SELECT count(*) FROM grade_scores)
   set q create table grade_scores ( \
            userid     varchar(80) not null, \
            taskkey    int         not null, primary key (userid, taskkey), \
            scorenumb  int, \
            scoretext  varchar(20), \
            done       date, \
            comment    varchar(255) \
         )
   "%createTable($(q))
end

#---UPDATE: grade_scores, make scorenumb numeric(8,2).
eval %generalQuery(INSERT INTO grade_scores (userid, taskkey, scorenumb) \
                                     VALUES ('_', -1, 1.2))
set q SELECT scorenumb FROM grade_scores WHERE userid='_' AND taskkey = -1
eval %oneRowQuery($(q))
if $not_equal ($(scorenumb) 1.2)
   eval %generalQuery(alter table grade_scores change scorenumb \
                                                      scorenumb numeric(8,2))
end
eval %generalQuery(DELETE FROM grade_scores WHERE userid='_' AND taskkey = -1)


#===CREATE: grade_tasks
if %queryFailed(SELECT count(*) FROM grade_tasks)
   set q create table grade_tasks ( \
            taskkey    int not null,    primary key (taskkey), \
            class      varchar(80),     index (class), \
            cnum       int,             index (cnum), \
            title      varchar(80), \
            type       varchar(20), \
            added      date, \
            due        date, \
            points     int, \
            weight     decimal(5,2) default 1.0, \
            comment    varchar(255), \
            asnkey     int \
         )
   "%createTable($(q))
end

#---UPDATE: grade_tasks, make points numeric(8,2).
eval %generalQuery(INSERT INTO grade_tasks (taskkey, points) VALUES (-100, 1.2))
set q SELECT points FROM grade_tasks WHERE taskkey = -100
eval %oneRowQuery($(q))
if $not_equal ($(points) 1.2)
   eval %generalQuery(alter table grade_tasks change points points numeric(8,2))
end
eval %generalQuery(DELETE FROM grade_tasks WHERE taskkey = -100)


#===CREATE: grade_tasks, task_cats, task_links
if %queryFailed(SELECT count(*) FROM tasks)
   set q create table tasks (   \
            tkey      int not null, primary key (tkey),   \
            tid       int not null, index(tid),   \
            title     varchar(64),  index(title),   \
            lead      varchar(64),  index(lead),   \
            assigner  varchar(64),  index(assigner),   \
            towner    varchar(240), index(towner),   \
            tgroup    varchar(255), index(tgroup),   \
            target    date,         index(target),   \
            priority  int,          index(priority),   \
            category  int,          index(category),   \
            status    varchar(32),  index(status),   \
            updated   datetime,     index(updated),   \
            current   int,          index(current),   \
            deleted   int,   \
            text      mediumtext, \
            texttype  varchar(32) \
         )
   "%createTable($(q))

   set q create table task_cats ( \
            category  int not null,  primary key  (category), \
            catname   varchar(240),  unique index (catname)   \
         )
   "%createTable($(q))

   eval %generalQuery (INSERT INTO task_cats (category, catname) \
                                      VALUES (0, '(none)'))

   set q create table task_links ( \
            tid     int,  index (tid),      \
            cnum    int,  index (cnum),     \
            inum    int, \
            rnum    int,  primary key (tid, cnum, inum, rnum) \
         )
   "%createTable($(q))
end


#===FILL: grouprules
if $not ($sql_query_select (SELECT count(*) FROM grouprules  \
                             WHERE owner='MGR' and access = -999))

   set mgrGroups conferenceCreate conferenceDelete conferenceChange \
       conferenceArchive conferenceRestore conferenceAllPrivileges \
       filesafeManage  \
       groupEditNonManager groupEditAll \
       interfaceManage  \
       passwordChangeUsers passwordChangeManagers passwordChangeAnyone \
       userCreate userDelete userEdit userReports \
       systemShutdown systemEditCML systemEditSwitches systemBulletins \
       systemAllPrivileges

   for x in $(mgrGroups)
      set grkey $sql_sequence(grouprules)
      set q INSERT INTO grouprules (grkey, owner, name, access) VALUES \
                                 ($(grkey), 'MGR', '$(x)', -999)
      eval %generalQuery($(q))
      eval $group_update ($quote(MGR $(x)))
   end
end

if $not ($sql_query_select (SELECT COUNT(*) FROM grouprules WHERE owner='MGR' \
                                AND name='quizCreate' AND access = -999))
   set grkey $sql_sequence(grouprules)
   set q INSERT INTO grouprules (grkey, owner, name, access) VALUES \
                              ($(grkey), 'MGR', 'quizCreate', -999)
   eval %generalQuery(q)
end

#===FILL: grouprules with primary manager userid.
if $not_empty ($arg(1))
   if $not ($sql_query_select (SELECT count(*) FROM grouprules \
                       WHERE owner='MGR' AND name='systemAllPrivileges))
      set grkey $sql_sequence(grouprules)
      set q INSERT INTO grouprules (grkey, owner, name, userid, access) \
            VALUES ($(grkey), 'MGR', 'systemAllPrivileges', '$arg(1)', 100)
      eval %generalQuery($(q))
      eval $group_update($quote(MGR systemAllPrivileges))
   end
end
"  Filled: grouprules $sql_query_select (\
   SELECT COUNT(*) FROM grouprules WHERE owner='MGR' AND access = -999)





#===CREATE: quiz, quizproblems, quizanswers, quizmap, quizscore
if %queryFailed(SELECT count(*) FROM quiz)
   set q create table quiz ( \
            qkey     int not null, primary key (qkey), \
            userid   varchar(240), index(userid), \
            title    varchar(240), \
            visible0 date, \
            visible1 date, \
            onepage  int default 0, \
            deleted  tinyint default 0 \
         )
   "%createTable($(q))
   
   set q create table quizproblems ( \
            pkey     int not null, primary key (pkey), \
            owner    varchar(240), index(owner), \
            category varchar(120),  \
            title    varchar(240), index(title), \
            text     mediumtext, \
            texttype varchar(20), \
            totalpoints int, \
            deleted     tinyint default 0 \
         )
   "%createTable($(q))
   
   set q create table quizanswers ( \
            akey      int not null, primary key(akey), \
            pkey      int not null, index(pkey), \
            text1     varchar(240), \
            type      varchar(20),  \
            text2     varchar(240), \
            answer    varchar(240), \
            sortorder int, \
            points    int, \
            newrow    tinyint default 1 \
         )
   "%createTable($(q))
   
   set q create table quizmap ( \
            qkey       int not null, index(qkey), \
            pkey       int not null, index(pkey), \
            sortorder  int, \
            score      int, \
            skippable  int, \
            editable   int  \
         )
   "%createTable($(q))
   
   set q create table quizscore ( \
            userid     varchar(240), index(userid), \
            qkey       int not null, index(qkey), \
            pkey       int not null, index(pkey), \
            akey       int not null, index(akey), \
            session    int default 0, \
            answer     mediumtext, \
            points     int, \
            status     int, \
            submitted  datetime \
         )
   "%createTable($(q))
end

#===CREATE: demonstration conference.
if $not_empty ($arg(1))
   set confs $sql_query_select (SELECT count(*) from confs)
   if $less (0$(confs) 1)
      set cnum $sql_sequence(confs)
      set q INSERT INTO confs (cnum, name) VALUES ($(cnum), 'Demonstration')
      eval %generalQuery($(q))
   
      set grkey $sql_sequence(grouprules)
      set query INSERT INTO grouprules (grkey, owner, name, userid, access) \
                     VALUES ($(grkey), 'CONF', '$(cnum)', '$arg(1)', 100)
      eval %generalQuery($(query))
   
      set grkey $sql_sequence(grouprules)
      set query INSERT INTO grouprules \
                   (grkey, owner, name, userid, wildcard, access, optional) \
          VALUES ($(grkey), 'CONF', '$(cnum)', '%', 1, 20, 1)
      eval %generalQuery($(query))
      eval $group_update ($quote(CONF $(cnum)))
   
      set m $caucus_path()/mkdemo
      set c C$str_sub(1 4 $plus($(cnum) 10000))
      eval $append ($(m) cd $caucus_path()$newline())
      eval $append ($(m) mv NEW_C001 $(c)$newline())
      eval $append ($(m) cd public_html/LIB$newline())
      eval $append ($(m) tar xf $caucus_path()/$(c)/lib.t$newline())
      eval $append ($(m) rm -f  $caucus_path()/$(c)/lib.t$newline())
      eval $append ($(m) chmod -R 755 .$newline())
      eval $xshell (0 1 1 chmod 700 $(m))
      eval $xshell (0 1 1 $(m))
   end
end

#===CREATE: interface_storage_cc51 conference.
if $not_empty ($arg(1))
   set query  SELECT cnum FROM confs where name='interface_storage_cc51'
   set ifcc51 $sql_query_select ($(query))
   if $less (0$(ifcc51) 1)
   
      #---Make sure effective userid can create conferences.
      set grkey $sql_sequence (grouprules)
      set query INSERT INTO grouprules (grkey, owner, name, userid, access) \
                  VALUES ($(grkey), 'MGR', 'conferenceCreate', '$userid()', 40)
      eval %generalQuery($(query))
      eval $group_update ($quote(MGR conferenceCreate))
   
      set cnum $create_conf(interface_storage_cc51 $arg(1))
   
      #---Give everyone readonly access.
      set grkey $sql_sequence (grouprules)
      set query INSERT INTO grouprules \
                        (grkey, owner, name, userid, access, wildcard) \
                 VALUES ($(grkey), 'CONF', '$(cnum)', '%', 10, 1)
      eval %generalQuery($(query))
      eval $group_update($quote(CONF $(cnum)))

      #---Give primary manager organizer access.
      set grkey $sql_sequence (grouprules)
      set query INSERT INTO grouprules \
                        (grkey, owner, name, userid, access, wildcard) \
                 VALUES ($(grkey), 'CONF', '$(cnum)', '$arg(1)', 100, 0)
      eval %generalQuery($(query))
      eval $group_update($quote(CONF $(cnum)))
   
      eval $set_site_data  ($(cnum) - modified $time())
   
      #---Create new, empty filesafe.
      set newname filesafe_interface_storage_cc51
      eval $set_site_data (0 - FN_$(newname) $(newname))
      set grkey $sql_sequence (grouprules)
      set query INSERT INTO grouprules (grkey, owner, name, userid, access) \
                VALUES ($(grkey), 'Filesafe', '$(newname)', '$arg(1)', 100)
      eval %generalQuery($(query))
      eval $group_update ($quote(Filesafe $(newname)))

      set h $sql_query_open (SELECT cnum, name FROM confs)
      while $sql_query_row  ($(h))
         "Confs: $(cnum) $(name)
      end
      eval  $sql_query_close($(h))
   end
end

#---Create user_in_conf table.
set query SELECT userid FROM user_in_conf LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query CREATE TABLE user_in_conf ( \
       userid VARCHAR(250), \
       cnum   int,          primary key (userid, cnum), \
       lastin DATETIME)
   set h $sql_query_open($(query))
   eval  $sql_query_close($(h))
end

#---Add items.qkey field
set query ALTER TABLE items add qkey int
set h $sql_query_open($(query))
eval  $sql_query_close($(h))

#---Make assignments auto-increment
set query ALTER TABLE assignments CHANGE asnkey asnkey int not null auto_increment
set h $sql_query_open($(query))
eval  $sql_query_close($(h))

#---Make grade_tasks auto-increment
set query ALTER TABLE grade_tasks CHANGE taskkey taskkey int not null auto_increment
set h $sql_query_open($(query))
eval  $sql_query_close($(h))

#---Add 'floating' column (does quiz problem text float, or is it tabular?)
set query SELECT floating FROM quizproblems LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE quizproblems ADD COLUMN floating int default 0
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add seeAnswers column to quiz table.
set query SELECT seeAnswers FROM quiz LIMIT 1
set h $sql_query_open ($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE quiz ADD COLUMN seeAnswers int default 0
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Site-wide user field 'registeredon'.
set query SELECT registeredon FROM user_info LIMIT 1
set h $sql_query_open ($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE user_info ADD COLUMN registeredon datetime
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
   set query  INSERT INTO user_columns VALUES \
                     ('registeredon','date','Registered',1)
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end
set query ALTER TABLE user_info ALTER COLUMN registeredon datetime
set h $sql_query_open ($(query))
eval  $sql_query_close($(h))

#---Site-wide user field 'regface'.
set query SELECT regface FROM user_info LIMIT 1
set h $sql_query_open ($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE user_info ADD COLUMN regface varchar(255)
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
   set query  INSERT INTO user_columns VALUES \
                     ('regface','string','Reg Interface',1)
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add 'copy_cnum' column to 'resps'.
set query SELECT copy_cnum FROM resps LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE resps ADD COLUMN copy_cnum int default 0
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add 'author_shows_as' column to 'resps'.
set query SELECT author_shows_as FROM resps LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE resps ADD COLUMN author_shows_as varchar(255)
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add conf.private
set query SELECT private FROM confs LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE confs ADD COLUMN private tinyint default 0
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add quizproblems.reference
set query SELECT reference FROM quizproblems LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE quizproblems ADD COLUMN reference varchar(255)
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add quiz.includeScore
set query SELECT includeScore FROM quiz LIMIT 1
set h $sql_query_open($(query))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set query ALTER TABLE quiz ADD COLUMN includeScore tinyint default 1
   set h $sql_query_open ($(query))
   eval  $sql_query_close($(h))
end

#---Add quiz.seesummary column if it does not exist.
set q SELECT seesummary FROM quiz LIMIT 1
set h $sql_query_open ($(q))
eval  $sql_query_close($(h))
if $less ($(h) 0)
   set q ALTER TABLE quiz ADD COLUMN (seesummary varchar(20))
   set h $sql_query_open ($(q))
   eval  $sql_query_close($(h))
end

#---Configuration table.
set version $sql_query_select (SELECT value FROM configuration WHERE name='database_version')
if $empty($(version))
   set q CREATE TABLE configuration ( \
            name   varchar(128), primary key (name), \
            value  varchar(255) \
         )
   eval %createTable($(q))
   set q INSERT INTO configuration (name, value) VALUES ('database_version', '5100')
   eval %oneRowQuery($(q))

   #---And while we're at it, this same version adjusts all of the 
   #   permissions numbers upwards by 10, to allow space to insert
   #   the new 'writeonly' permission.
   for tableName in groups grouprules
      for permission in 40 30 20 10
         set q UPDATE $(tableName) SET access = $plus ($(permission) 10) \
                WHERE access = $(permission)
         eval %oneRowQuery($(q))
         set q UPDATE $(tableName) SET priority = $plus ($(permission) 10) \
                WHERE priority = $(permission)
         eval %oneRowQuery($(q))

         set optionalPerm $divide($(permission) 10)
         set q UPDATE $(tableName) SET access = $plus ($(optionalPerm) 1) \
                WHERE access = $(optionalPerm)
         eval %oneRowQuery($(q))
      end
   end
end

#---9/16/09 DB version 5101 removes auto_increment from table resps.
set version $sql_query_select (\
    SELECT value FROM configuration WHERE name='database_version')
if $less ($(version) 5101)
   set q ALTER TABLE resps MODIFY COLUMN rnum int
   eval %oneRowQuery($(q))

   set q UPDATE configuration SET value='5101' WHERE name='database_version'
   eval %oneRowQuery($(q))
end

#---9/16/09 DB version 5102 changes all tables to InnoDB.
set version $sql_query_select (\
    SELECT value FROM configuration WHERE name='database_version')
if $less ($(version) 5102)

   for table in assignments  conf_has_items  confhidden  configuration  \
                conforder  confs  events  grade_scores  grade_tasks  \
                grouprules  groups  items  name_cascade  quiz  quizanswers  \
                quizmap  quizproblems  quizscore  resps  resps_seen  sequence_confs  \
                sequence_grouprules  site_data  task_cats  task_links  tasks  \
                user_columns  user_data  user_iface  user_in_conf  user_info  

      set q ALTER TABLE $(table) engine = InnoDB
      eval %oneRowQuery($(q))
   end

   set q UPDATE configuration SET value='5102' WHERE name='database_version'
   eval %oneRowQuery($(q))
   set version 5102
end

#---9/21/09 DB version 5103 Make grouprules.grkey auto_increment,
#      ditch related 'sequence' table.
if $less ($(version) 5103)
   set q ALTER TABLE grouprules MODIFY COLUMN grkey int not null auto_increment;
   eval %oneRowQuery($(q))

   set q DROP TABLE sequence_grouprules
   eval %oneRowQuery($(q))

   set q UPDATE configuration SET value='5103' WHERE name='database_version'
   eval %oneRowQuery($(q))
   set version 5103
end

#---9/26/09 DB version 5104 Add confs.lastAccess
if $less ($(version) 5105)
   set q ALTER TABLE confs ADD COLUMN lastAccess int not null default 0;
   eval %oneRowQuery($(q))
   set q ALTER TABLE confs ADD INDEX  lastAccess (lastAccess);
   eval %oneRowQuery($(q))

   set q UPDATE configuration SET value='5104' WHERE name='database_version'
   eval %oneRowQuery($(q))
   set version 5104
end


#---9/28/09 DB version 5105 Make tasks.tkey auto_increment,
#      ditch related 'sequence' table.
if $less ($(version) 5105)
   set q ALTER TABLE tasks MODIFY COLUMN tkey int not null auto_increment
   eval  %oneRowQuery($(q))
   set q DROP TABLE sequence_tasks
   eval  %oneRowQuery($(q))

   set q DELETE FROM task_cats WHERE category = 0;
   eval  %oneRowQuery($(q))
   set q ALTER TABLE task_cats MODIFY COLUMN category int not null auto_increment
   eval  %oneRowQuery($(q))
   set q DROP TABLE sequence_task_cats
   eval  %oneRowQuery($(q))

   set q ALTER TABLE quiz MODIFY COLUMN qkey int not null auto_increment
   eval  %oneRowQuery($(q))
   set q DROP TABLE sequence_quiz
   eval  %oneRowQuery($(q))

   set q ALTER TABLE quizproblems MODIFY COLUMN pkey int not null auto_increment
   eval  %oneRowQuery($(q))
   set q DROP TABLE sequence_quizproblems
   eval  %oneRowQuery($(q))

   set q ALTER TABLE quizanswers MODIFY COLUMN akey int not null auto_increment
   eval  %oneRowQuery($(q))
   set q DROP TABLE sequence_quizanswers
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5105' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5105
end

#---04/24/10 DB version 5106.  Add 'deleted' column to conf table.
if $less ($(version) 5106)
   set q ALTER TABLE confs ADD COLUMN deleted int default 0
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5106' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5106
end

#---05/01/10 DB version 5107.  Add 'deleted' column to conf_has_items,
#   extend resp.deleted.
if $less ($(version) 5107)
   set q ALTER TABLE conf_has_items ADD COLUMN deleted int default 0
   eval  %oneRowQuery($(q))

   set q ALTER TABLE resps       MODIFY COLUMN deleted int default 0
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5107' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5107
end

#---05/09/10 DB version 5108.  Add 'version' column to resps.
#   Add 'type' column to items.
if $less ($(version) 5108)
   set q ALTER TABLE resps ADD COLUMN version smallint default 0
   eval  %oneRowQuery($(q))
   set q ALTER TABLE resps DROP PRIMARY KEY
   eval  %oneRowQuery($(q))
   set q ALTER TABLE resps ADD PRIMARY KEY (rnum, items_id, version)
   eval  %oneRowQuery($(q))

   set q ALTER TABLE items ADD COLUMN type enum('item', 'quiz', 'wiki') default 'item'
   eval  %oneRowQuery($(q))
   set q UPDATE items SET type='quiz' WHERE qkey > 0
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5108' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5108
end

#---05/31/10 DB version 5110.  Add resps.edittime, resps.editid
if $less ($(version) 5110)
   set q ALTER  TABLE resps ADD COLUMN edittime datetime
   eval  %oneRowQuery($(q))
   set q UPDATE       resps SET edittime = time
   eval  %oneRowQuery($(q))
   set q ALTER  TABLE resps ADD COLUMN editid varchar(240)
   eval  %oneRowQuery($(q))
   set q UPDATE       resps SET editid = userid
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5110' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5110
end

#---06/11/10 DB version 5111.  Add resps.versioned
if $less ($(version) 5111)
   set q ALTER  TABLE resps ADD COLUMN versioned tinyint  default 0
   eval  %oneRowQuery($(q))
   set q ALTER  TABLE resps ADD COLUMN approved  smallint default 0
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5111' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5111
end

#---06/17/10 DB version 5112.  Add resp type's freeblog, modblog.
if $less ($(version) 5112)
   set q ALTER TABLE items MODIFY COLUMN type \
               enum('item', 'quiz', 'wiki', 'freeblog', 'modblog') default 'item'
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5112' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5112
end

#---08/08/10 DB version 5113.  Add resp.lat_long.
if $less ($(version) 5113)
   set q ALTER TABLE resps ADD COLUMN lat_long varchar(200)
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5113' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5113
end

#---08/09/10 DB version 5114.  Add table ip2latlong.
if $less ($(version) 5114)
   set q CREATE TABLE ip2latlong (\
            ip varchar(80), \
            latlong varchar(80), \
            added   date DEFAULT NULL, \
            PRIMARY KEY (ip) \
         )  ENGINE=InnoDB DEFAULT CHARSET=latin1
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5114' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5114
end

#---08/19/10 DB version 5115.  Add ip2latlong.location
if $less ($(version) 5115)
   set q ALTER TABLE ip2latlong ADD COLUMN location varchar(100)
   eval  %oneRowQuery($(q))

   set q ALTER TABLE resps ADD COLUMN location varchar(100)
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5115' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5115
end

#---08/22/10 DB version 5116.  Add item type survey
if $less ($(version) 5116)
   set q ALTER TABLE items MODIFY COLUMN type \
               enum('item', 'quiz', 'wiki', 'freeblog', 'modblog', 'survey') default 'item'
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5116' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5116
end

#---10/08/10 DB version 5117.  Add table usersip2latlong.
if $less ($(version) 5117)
   set q CREATE TABLE usersip2latlong (\
            userid   varchar(255), \
            ip       varchar(80), \
            latlong  varchar(80), \
            location varchar(100), \
            added    date DEFAULT NULL, \
            PRIMARY KEY (userid, ip) \
         )  ENGINE=InnoDB DEFAULT CHARSET=latin1
   eval  %oneRowQuery($(q))

   set q ALTER TABLE resps ADD COLUMN ip varchar(80)
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5117' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5117
end

#---10/14/10 DB version 5118.  Add resps.map.
#if $less ($(version) 5118)
#   set q ALTER TABLE resps ADD COLUMN map tinyint default 0
#   eval  %oneRowQuery($(q))
#
#   set q UPDATE configuration SET value='5118' WHERE name='database_version'
#   eval  %oneRowQuery($(q))
#   set version 5118
#end

#---10/28/10 DB version 5119.  Drop resps.map. (sigh)
if $equal ($(version) 5118)
   set q ALTER TABLE resps DROP COLUMN map
   eval  %oneRowQuery($(q))
end

if $less($(version) 5119)
   set q UPDATE configuration SET value='5119' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5119
end

if $less ($(version) 5120)
   set q CREATE TABLE object2object ( \
            userid   varchar(255),  index(userid), \
            items_id int,           index(items_id) \
         )  ENGINE=InnoDB DEFAULT CHARSET=latin1
   "%createTable($(q))

   set q UPDATE configuration SET value='5120' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5120
end

if $less ($(version) 5121)
   set q ALTER TABLE resps ADD KEY items_id (items_id)
   eval  %oneRowQuery($(q))

   set q UPDATE configuration SET value='5121' WHERE name='database_version'
   eval  %oneRowQuery($(q))
   set version 5121
end


"--------------------------------------------------------
"$errors()
"--------------------------------------------------------
eval $append ($caucus_path()/updateDatabase.log \
              End... $dateof($time())$newline())
